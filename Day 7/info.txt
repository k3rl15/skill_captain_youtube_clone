Comments in your media player

Concept:

We will explain these two components: `Comment.js` and `DisplayComments.js`.
Tutorial: Building a Comment Display Component in React
Introduction
In this tutorial, we'll explore how to create a basic comment display component using React. The project includes two components: `Comment.js` and `DisplayComments.js`. 
These components work together to showcase a list of comments with the commenter's name and their corresponding messages.
Prerequisites
Make sure you have a basic understanding of React and have a React environment set up.
Project Structure
The project is organized with two main components:
1. Comment.js: This component defines the structure of an individual comment. 2. DisplayComments.js: This component displays a list of comments using the `Comment` 
component.
Comment.js
The `Comment.js` file exports a functional React component that takes two props - `name` and `comment`. Let's break down the code:
// components/Comment.js
import React from 'react';


export default function Comment(props) {
  const { name, comment } = props;
  return (
    <div>
    <strong>{name}</strong>
    <p>{comment}</p>
    <hr />
    </div>
  );
};

- The component receives `name` and `comment` as props and renders them within a `<div>`. - The commenter's name is displayed in bold using the `<strong>` tag. - The 
comment itself is displayed within a `<p>` tag. - A horizontal line (`<hr />`) separates each comment for better visual distinction.
DisplayComments.js
The `DisplayComments.js` file exports a React component that utilizes the `Comment` component to display a list of comments. Here's the code:
// components/DisplayComments.js
import React from 'react';
import Comment from './Comment';


const commentsList = [
  { name: 'John Doe', comment: 'Great work on the project!' },
  { name: 'Jane Smith', comment: 'I love the design and layout.' },
  { name: 'Bob Johnson', comment: 'Nice use of colors.' },
];


export default function DisplayComments() {
  return (
    <div>
      <h2>Comments</h2>
      {commentsList.map((comment, index) => (
        <Comment key={index} name={comment.name} comment={comment.comment} />
      ))}
      </div>
  );
};

- The `DisplayComments` component imports the `Comment` component. - It defines a static array `commentsList` that holds sample comment data. - The `render` function maps 
through the `commentsList` array, creating a `Comment` component for each comment with the commenter's name and message. - The entire list is wrapped in a `<div>` with 
an `<h2>` heading for better presentation.
Integrating Components
To use these components in your application, simply import the `DisplayComments` component where you want to display the comments:

  // pages/index.tsx
  "use client"

  // pages/index.js
  import React from 'react';
  import MediaPlayer from '@/components/MediaPlayer';
  import Suggestion from '@/components/Suggestion';
  import DisplayComments from '@/components/DisplayComments';
  
  export default function Home() {
    return (
      <div className="flex min-h-screen flex-col p-1">
        <header className="p-4 text-center bg-gray-800">
          <h1 className="text-4xl font-bold">Stream Video</h1>
        </header>
        <main className="grid md:grid-cols-3 grid-cols-1 gap-4 p-20 flex-grow">
            <div className="border-solid col-span-2 border-2 border-pink flex flex-grow">
              <MediaPlayer />
            </div>
            <div className="border-solid border-2 border-pink flex flex-grow">
              <Suggestion />
            </div>
            <div>
            <DisplayComments />
            </div>
        </main>
        <footer className="p-4 text-center bg-gray-800">
          <p className="text-sm">Â© 2024 Your Website Name</p>
        </footer>
</div>
    );
  }

Conclusion
With these two components, you can easily integrate a comment display feature into your React application. Customize the `commentsList` array with real-time data to make 
it a dynamic and interactive part of your project. Feel free to further enhance the styling and functionality based on your project's requirements.
